import { AppRoutingModule } from './../app-routing.module';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { Book } from '../models/book.model';
import { Resolve, ActivatedRouteSnapshot } from '@angular/router';

//import { DataSnapshot} from 'firebase.database.DataSnapshot';

import * as firebase from 'firebase';
//import { resolveAny } from 'dns';


@Injectable()
export class BooksService {


  books: Book[] = [];
  booksSubject = new Subject<Book[]>();


  emitBooks() {
    this.booksSubject.next(this.books);

  }
  saveBooks() {
    firebase.database().ref('/books').set(this.books);
  }
  getBooks() {
    firebase.database().ref('/books')
      .on('value', (data: firebase.database.DataSnapshot) => {
          this.books = data.val() ? data.val() : [];
          this.emitBooks();
        }
      );
  }

  getSingleBook(id: number) {
    return new Promise(
      (resolve, reject) => {
        firebase.database().ref('/books/' + id).once('value').then(
          (data: firebase.database.DataSnapshot) => {
            resolve(data.val());
          }, (error) => {
            reject(error);
          }
        );
      }
    );
  }
  constructor() {
    this.getBooks();
}

createNewBook(newBook: Book) {
  this.books.push(newBook);
  this.saveBooks();
  this.emitBooks();
}

removeBook(book: Book) {
  const bookIndexToRemove = this.books.findIndex(
    (bookEl)  => {
      if(bookEl === book) {
        return true}
        else{
        return false};
      }

  );
  this.books.splice(bookIndexToRemove, 1);
  this.saveBooks();
  this.emitBooks();
}
}
